#!/usr/bin/expect

set timeout 10

set op [lindex $argv 0]
set ServerIPList [lindex $argv 1]
set root [lindex $argv 2]
set password [lindex $argv 3]

set new_user [lindex $argv 4]
set new_password [lindex $argv 5]
set new_group [lindex $argv 6]

set source_file [lindex $argv 4]
set desc_file [lindex $argv 5]

set command [lindex $argv 4]

proc add_user { server user password new_user new_password group } {
    puts "Add $new_user to $server by $user start ...\n"
    
    set timeout 120
    spawn ssh "$user@$server"
    expect { 
       "*(yes/no)?" { send "yes\r";exp_continue }
       "*assword:" { send "$password\r" }
    }
    expect {
       "*]#" { send "sudo groupadd -f $group \r" }
       "*]$" { send "sudo groupadd -f $group \r" }
    }
    expect {
       "*assword:" { send "$password\r" }
       "*]#" { send "sudo useradd -d /home/$new_user -g $group $new_user \r" }
       "*]$" { send "sudo useradd -d /home/$new_user -g $group $new_user \r" }
    }
    expect {
       "*]#" { send "sudo passwd $new_user \r" }
       "*]$" { send "sudo passwd $new_user \r" }
    }
    expect "*assword:" { send "$new_password\r" }
    expect "*assword:" { send "$new_password\r" }
    expect {
       "*]#" { send "exit\r" }
       "*]$" { send "exit\r" }
    }

    puts "Add $new_user to $server by $user success ...\n"
}

proc add_user_list { server_list user password new_user new_password new_group} {
    set list [split $server_list ","]
    foreach server $list {
        puts "add new user: $new_user to server:$server by $user ........................."
        set running [add_user "$server" "$user" "$password" "$new_user" "$new_password" "$new_group"]
    }
}

proc dist_server_ssh_key { server user password } {
    spawn ssh-copy-id -i /home/$user/.ssh/id_rsa.pub "$server"
    expect {
       "*(yes/no)?" { send "yes\r";exp_continue }
       "*assword:" { send "$password\r" }
       "*option)" { return 0 }
       "*WARNING:" { return 0 }
    }
    expect "*~]$" { send "chmod 600 ~/.ssh/authorized_keys\r" } 
}

proc generate_pub_key { user } {
    puts "Generate $user public key start ...\n"
    spawn ssh-keygen -t rsa
    expect "*id_rsa):" { send "\r" }
    expect {
        "(y/n)?" { send "y\r";exp_continue }
        "*passphrase):" { send "\r" }
    }
    expect "*again:" { send "\r" }
    expect "*]$" { send "chmod 700 ~/.ssh\r" }
}

proc dist_one_to_all_ssh_key { server_list user password } {
    if {[file exists /home/$user/.ssh/id_rsa.pub]} {
        puts "public $user key is exists ...\n"
    } else {
        set running [generate_pub_key "$user"]
    }
    
    set list [split $server_list ","]
    foreach server $list {
        puts "dist ssh key to server:$server ........................."
        set running [dist_server_ssh_key "$server" "$user" "$password"]
    }
}

proc initial_server_ssh_known_key { server user password } {
    set timeout 3
    spawn ssh "$user@$server"
    expect {
       "*(yes/no)?" { send "yes\r";exp_continue }
       "*assword:" { send "$password\r" }
       "*]$" { send "exit\r" }
       "*]#" { send "exit\r" }
       "*]$ " { send "exit\r" }
       "*]# " { send "exit\r" }              
    }
            
    expect {
       "*]$" { send "exit\r\r" }
       "*]#" { send "exit\r\r" }
       "*]$ " { send "exit\r\r" }
       "*]# " { send "exit\r\r" }       
    }
}

proc initial_all_server_ssh_known_key { server_list user password } {
    set list [split $server_list ","]
    foreach server $list {
        puts "initial ssh key to server:$server ........................."
        set running [initial_server_ssh_known_key "$server" "$user" "$password"]
    }
}

proc clear_user_known_host { server user password } {
    puts "Clear $server $user ssh known hosts and auth ........"
    set timeout 3
    spawn ssh "$user@$server"
    expect {
       "*(yes/no)?" { send "yes\r";exp_continue }
       "*assword:" { send "$password\r" }
    }
    
    expect "*~]$*" { 
        if {[file exists /home/$user/.ssh/known_hosts]} {
            send "rm /home/$user/.ssh/known_hosts \r"
        }          
    }
    
    expect "*~]$*" { puts "exit...\r";send "exit \r" }
    
    puts "Clear $server $user ssh known hosts and auth success ....."
}

proc clear_all_server_ssh_known_key { server_list user password } {
    set list [split $server_list ","]
    foreach server $list {
        puts "Clear ssh key to server:$server ........................."
        set running [clear_user_known_host "$server" "$user" "$password"]
    }
}

proc clear_user_auth { server user password } {
    puts "Clear $server $user ssh known hosts and auth ........"
    set timeout 3
    spawn ssh "$user@$server"
    expect {
       "*(yes/no)?" { send "yes\r";exp_continue }
       "*assword:" { send "$password\r" }
    }
    
    expect "*~]$*" {
        if {[file exists /home/$user/.ssh/authorized_keys]} {
            send "rm /home/$user/.ssh/authorized_keys \r"
        }            
    }
    
    expect "*~]$*" { puts "exit...\r";send "exit \r" }
    
    puts "Clear $server $user ssh auth success ....."
}

proc clear_all_server_ssh_auth { server_list user password } {
    set list [split $server_list ","]
    foreach server $list {
        puts "Clear ssh auth to server:$server ........................."
        set running [clear_user_auth "$server" "$user" "$password"]
    }
}

proc dist_server_file { server user password source_file desc_file } {
    puts "dist file:$source_file to $server $desc_file ........"
    spawn scp "$source_file" "$user@$server:/home/$user/$desc_file"
    expect {
       "*(yes/no)?" { send "yes\r";exp_continue }
       "*assword:" { send "$password\r" }
       "*~]$*" {}
    }

    puts "dist file:$source_file to $server $desc_file success ....."
}

proc dist_all_server_file { server_list user password source_file desc_file } {
    set list [split $server_list ","]
    foreach server $list {
        puts "dist file to server:$server ........................."
        set running [dist_server_file "$server" "$user" "$password" "$source_file" "$desc_file"]
    }
}

proc exec_server_command { server user password command } {
    puts "Execute $server $command ........"
    set timeout 3
    spawn ssh "$user@$server"
    expect {
       "*(yes/no)?" { send "yes\r";exp_continue }
       "*assword:" { send "$password\r" }
    }
    
    expect "*~]$*" {
       send "$command \r"    
    }
    
    expect "*~]$*" { puts "exit...\r";send "exit \r" }
    
    puts "Execute $server $command success ....."
}

proc exec_all_server_command { server_list user password command } {
    set list [split $server_list ","]
    foreach server $list {
        puts "execute server:$server command: $command ........................."
        set running [exec_server_command "$server" "$user" "$password" "$command"]
    }
}

if {$argc != 4 && $argc != 7 && $argc != 6 && $argc != 5} {
    puts "Usage:expect initial.exp \[userCreate|distSSHKey|initKnownKey|clearKnownHosts|clearAuth|distFile|executeCmd\] \[ServerIPList:127.0.0.1,127.0.0.2\] \[User\] \[Password\] \[NewUser|Source|Command\] \[NewPassword|Desc\] \[NewGroup\]"
    exit 1
}

if {$argc == 4 && $op == "clearAuth"} {
    puts "clear server user auth list:$ServerIPList known hosts ........................."
    set running [clear_all_server_ssh_auth "$ServerIPList" "$root" "$password"]
    
    exit 0
}

if {$argc == 4 && $op == "clearKnownHosts"} {
    puts "clear server list:$ServerIPList known hosts ........................."
    set running [clear_all_server_ssh_known_key "$ServerIPList" "$root" "$password"]
    
    exit 0
}

if {$argc == 4 && $op == "distSSHKey"} {
    puts "dist ssh key to server list:$ServerIPList ........................."
    set running [dist_one_to_all_ssh_key "$ServerIPList" "$root" "$password"]
    
    exit 0
}

if {$argc == 4 && $op == "initKnownKey"} {
    puts "initial ssh known key to server list:$ServerIPList ........................."
    set running [initial_all_server_ssh_known_key "$ServerIPList" "$root" "$password"]
    exit 0
}

if {$argc == 5 && $op == "executeCmd"} {
    puts "Execute server list:$ServerIPList command:$command ........................."
    set running [exec_all_server_command "$ServerIPList" "$root" "$password" "$command"]
    
    exit 0
}

if {$argc == 6 && $op == "distFile"} {
    puts "dist file:$source_file to server list:$ServerIPList desc:$desc_file ........................."
    set running [dist_all_server_file "$ServerIPList" "$root" "$password" "$source_file" "$desc_file"]
    
    exit 0
}

if {$argc == 7 && $op == "userCreate"} {
    puts "add new user: $new_user to server list:$ServerIPList by $root ........................."
    set running [add_user_list "$ServerIPList" "$root" "$password" "$new_user" "$new_password" "$new_group"]
    exit 0
}

puts "Usage:expect initial.exp \[userCreate|distSSHKey|clearKnownHost\clearAuth|distFile|executeCmd\] \[ServerIPList:127.0.0.1,127.0.0.2\] \[User\] \[Password\] \[NewUser|Source|Command\] \[NewPassword|Desc\] \[NewGroup\]"